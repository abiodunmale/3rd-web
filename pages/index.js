import { useAddress, useContract, Web3Button, ConnectWallet } from "@thirdweb-dev/react";
import toast, { Toaster } from 'react-hot-toast';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';


import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import { signatureDropAddress } from '../utils/config';
import MintSuccess from "./mint-success";

export default function Home() {

  const router = useRouter();
  const address = useAddress();

  const [mintSuccess, setMintSuccess] = useState(false);
  const [nftInfo, setNftInfo] = useState({});

  const { contract: signatureDrop } = useContract(
    signatureDropAddress,
    "signature-drop"
  );


  const claim = async () => {
    try {
      const tx = await signatureDrop?.claim(1);
      console.log(tx);
      toast.success(`Succesfully minted NFT!`);
      const nfts = await signatureDrop.get(Number(tx[0].id));
      setNftInfo(nfts);
      setMintSuccess(true);
    } catch (error) {
      // alert(error?.message);
      toast.error("An error occured!!");
    }
  }

  const claimWithSignature = async () => {
    const signedPayloadReq = await fetch(`/api/generate-mint-signature`, {
      method: "POST",
      body: JSON.stringify({
        address: address,
      }),
    });

    console.log(signedPayloadReq);

    if (signedPayloadReq.status === 400) {
      toast.error("Looks like you don't own an early access NFT :( You don't qualify for the free mint.");
      return;
    } else {
      try {
        const signedPayload = await signedPayloadReq.json();

        console.log(signedPayload);

        const nft = await signatureDrop?.signature.mint(signedPayload);
        console.log(nft);
        console.log(Number(nft.id));
        toast.success(`Succesfully minted NFT!`);
        const nfts = await signatureDrop.get(Number(nft.id));
        setNftInfo(nfts);
        setMintSuccess(true);
      } catch (error) {
        // alert(error?.message);
        toast.error("An error occured!!");
      }
    }
  } 

  return (
    <div className='p-10 text-center h-screen w-full'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Toaster
        position="top-center"
        reverseOrder={false}
      />

      {address ? 
        <>
          {!mintSuccess ? 
              <div className="grid grid-cols-1 gap-1 mt-[100px]">
                <div className='text-center h-[200px] py-12 justify-self-center'>
                    <span className="self-center text-xl font-semibold whitespace-nowrap text-black">Mint Cost 0.001</span>
                    <Web3Button
                      className="mt-5"
                      contractAddress={signatureDropAddress}
                      action={() => claim()}
                      colorMode="dark"
                    >
                      Claim
                    </Web3Button>
                </div>
                <div className='h-[200px] py-12 justify-self-center'>
                  <span className="self-center text-xl font-semibold whitespace-nowrap text-black">Claim With Signature For Free</span>
                  <Web3Button
                      className="mt-5"
                      contractAddress={signatureDropAddress}
                      action={() => claimWithSignature()}
                      colorMode="dark"
                    >
                    Claim With Signature
                  </Web3Button>
                </div>
              </div>
          : 
            <MintSuccess nftInfo={nftInfo} />
          }

        </>
      : 
        <div className="flex justify-center mt-[300px]">
          <ConnectWallet colorMode="dark"/>
        </div>
      }

    </div>
  )
}
